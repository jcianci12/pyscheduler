//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class Client {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * Get all assignments
     * @return A list of all assignments
     */
    assignmentsAll(): Observable<Assignment[]> {
        let url_ = this.baseUrl + "/assignments";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAssignmentsAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAssignmentsAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Assignment[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Assignment[]>;
        }));
    }

    protected processAssignmentsAll(response: HttpResponseBase): Observable<Assignment[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Assignment.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Create a new assignment
     * @param assignment (optional) 
     * @return The created assignment
     */
    assignmentsPOST(assignment: Assignment2 | null | undefined): Observable<Assignment> {
        let url_ = this.baseUrl + "/assignments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(assignment);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAssignmentsPOST(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAssignmentsPOST(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Assignment>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Assignment>;
        }));
    }

    protected processAssignmentsPOST(response: HttpResponseBase): Observable<Assignment> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = Assignment.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Delete an assignment
     * @return Assignment deleted
     */
    assignmentsDELETE(assignment_id: number): Observable<void> {
        let url_ = this.baseUrl + "/assignments/{assignment_id}";
        if (assignment_id === undefined || assignment_id === null)
            throw new Error("The parameter 'assignment_id' must be defined.");
        url_ = url_.replace("{assignment_id}", encodeURIComponent("" + assignment_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAssignmentsDELETE(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAssignmentsDELETE(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processAssignmentsDELETE(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get an assignment
     * @return The assignment
     */
    assignmentsGET(assignment_id: number): Observable<Assignment> {
        let url_ = this.baseUrl + "/assignments/{assignment_id}";
        if (assignment_id === undefined || assignment_id === null)
            throw new Error("The parameter 'assignment_id' must be defined.");
        url_ = url_.replace("{assignment_id}", encodeURIComponent("" + assignment_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAssignmentsGET(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAssignmentsGET(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Assignment>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Assignment>;
        }));
    }

    protected processAssignmentsGET(response: HttpResponseBase): Observable<Assignment> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Assignment.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Update an assignment
     * @param assignment (optional) 
     * @return Assignment updated
     */
    assignmentsPUT(assignment_id: number, assignment: Assignment3 | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/assignments/{assignment_id}";
        if (assignment_id === undefined || assignment_id === null)
            throw new Error("The parameter 'assignment_id' must be defined.");
        url_ = url_.replace("{assignment_id}", encodeURIComponent("" + assignment_id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(assignment);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAssignmentsPUT(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAssignmentsPUT(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processAssignmentsPUT(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Create a new person
     * @param person (optional) 
     * @return The created person
     */
    createperson(person: Person2 | null | undefined): Observable<Person> {
        let url_ = this.baseUrl + "/createperson";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(person);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateperson(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateperson(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Person>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Person>;
        }));
    }

    protected processCreateperson(response: HttpResponseBase): Observable<Person> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = Person.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Delete a person
     * @return Person deleted
     */
    deleteperson(person_id: number): Observable<void> {
        let url_ = this.baseUrl + "/deleteperson/{person_id}";
        if (person_id === undefined || person_id === null)
            throw new Error("The parameter 'person_id' must be defined.");
        url_ = url_.replace("{person_id}", encodeURIComponent("" + person_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteperson(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteperson(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteperson(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get all events
     * @return A list of all events
     */
    eventsAll(): Observable<Event[]> {
        let url_ = this.baseUrl + "/events";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEventsAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEventsAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Event[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Event[]>;
        }));
    }

    protected processEventsAll(response: HttpResponseBase): Observable<Event[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Event.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Create a new event
     * @param event (optional) 
     * @return The created event
     */
    eventsPOST(event: Event2 | null | undefined): Observable<Event> {
        let url_ = this.baseUrl + "/events";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(event);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEventsPOST(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEventsPOST(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Event>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Event>;
        }));
    }

    protected processEventsPOST(response: HttpResponseBase): Observable<Event> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = Event.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Delete an event
     * @return Event deleted
     */
    eventsDELETE(event_id: number): Observable<void> {
        let url_ = this.baseUrl + "/events/{event_id}";
        if (event_id === undefined || event_id === null)
            throw new Error("The parameter 'event_id' must be defined.");
        url_ = url_.replace("{event_id}", encodeURIComponent("" + event_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEventsDELETE(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEventsDELETE(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processEventsDELETE(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get a single event
     * @return The event
     */
    eventsGET(event_id: number): Observable<Event> {
        let url_ = this.baseUrl + "/events/{event_id}";
        if (event_id === undefined || event_id === null)
            throw new Error("The parameter 'event_id' must be defined.");
        url_ = url_.replace("{event_id}", encodeURIComponent("" + event_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEventsGET(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEventsGET(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Event>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Event>;
        }));
    }

    protected processEventsGET(response: HttpResponseBase): Observable<Event> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Event.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Update an event
     * @param event (optional) 
     * @return The updated event
     */
    eventsPUT(event_id: number, event: Event3 | null | undefined): Observable<Event> {
        let url_ = this.baseUrl + "/events/{event_id}";
        if (event_id === undefined || event_id === null)
            throw new Error("The parameter 'event_id' must be defined.");
        url_ = url_.replace("{event_id}", encodeURIComponent("" + event_id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(event);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEventsPUT(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEventsPUT(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Event>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Event>;
        }));
    }

    protected processEventsPUT(response: HttpResponseBase): Observable<Event> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Event.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get all events with their assignments
     * @return A list of all events with their assignments
     */
    eventswithassignments(): Observable<Event[]> {
        let url_ = this.baseUrl + "/eventswithassignments";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEventswithassignments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEventswithassignments(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Event[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Event[]>;
        }));
    }

    protected processEventswithassignments(response: HttpResponseBase): Observable<Event[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Event.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get all people
     * @return A list of all people
     */
    getpeople(): Observable<Person[]> {
        let url_ = this.baseUrl + "/getpeople";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetpeople(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetpeople(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Person[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Person[]>;
        }));
    }

    protected processGetpeople(response: HttpResponseBase): Observable<Person[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Person.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get a person by ID
     * @return The person
     */
    getperson(person_id: number): Observable<Person> {
        let url_ = this.baseUrl + "/getperson/{person_id}";
        if (person_id === undefined || person_id === null)
            throw new Error("The parameter 'person_id' must be defined.");
        url_ = url_.replace("{person_id}", encodeURIComponent("" + person_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetperson(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetperson(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Person>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Person>;
        }));
    }

    protected processGetperson(response: HttpResponseBase): Observable<Person> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Person.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get all tasks
     * @return A list of all tasks
     */
    tasksAll(): Observable<Task[]> {
        let url_ = this.baseUrl + "/tasks";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTasksAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTasksAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Task[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Task[]>;
        }));
    }

    protected processTasksAll(response: HttpResponseBase): Observable<Task[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Task.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Create a new task
     * @param task (optional) 
     * @return The created task
     */
    tasksPOST(task: Task2 | null | undefined): Observable<Task> {
        let url_ = this.baseUrl + "/tasks";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(task);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTasksPOST(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTasksPOST(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Task>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Task>;
        }));
    }

    protected processTasksPOST(response: HttpResponseBase): Observable<Task> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = Task.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Delete a task
     * @return Task deleted
     */
    tasksDELETE(task_id: number): Observable<void> {
        let url_ = this.baseUrl + "/tasks/{task_id}";
        if (task_id === undefined || task_id === null)
            throw new Error("The parameter 'task_id' must be defined.");
        url_ = url_.replace("{task_id}", encodeURIComponent("" + task_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTasksDELETE(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTasksDELETE(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processTasksDELETE(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get a task by ID
     * @return The task
     */
    tasksGET(task_id: number): Observable<Task> {
        let url_ = this.baseUrl + "/tasks/{task_id}";
        if (task_id === undefined || task_id === null)
            throw new Error("The parameter 'task_id' must be defined.");
        url_ = url_.replace("{task_id}", encodeURIComponent("" + task_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTasksGET(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTasksGET(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Task>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Task>;
        }));
    }

    protected processTasksGET(response: HttpResponseBase): Observable<Task> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Task.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Update a task
     * @param task (optional) 
     * @return The updated task
     */
    tasksPUT(task_id: number, task: Task3 | null | undefined): Observable<Task> {
        let url_ = this.baseUrl + "/tasks/{task_id}";
        if (task_id === undefined || task_id === null)
            throw new Error("The parameter 'task_id' must be defined.");
        url_ = url_.replace("{task_id}", encodeURIComponent("" + task_id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(task);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTasksPUT(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTasksPUT(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Task>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Task>;
        }));
    }

    protected processTasksPUT(response: HttpResponseBase): Observable<Task> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Task.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get all assignments by event ID
     * @return A list of assignments for the specified event
     */
    test123(event_id: number): Observable<Assignment[]> {
        let url_ = this.baseUrl + "/test123/{event_id}";
        if (event_id === undefined || event_id === null)
            throw new Error("The parameter 'event_id' must be defined.");
        url_ = url_.replace("{event_id}", encodeURIComponent("" + event_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTest123(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTest123(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Assignment[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Assignment[]>;
        }));
    }

    protected processTest123(response: HttpResponseBase): Observable<Assignment[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Assignment.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get all unavailability
     * @return A list of all unavailability
     */
    unavailabilityAll(): Observable<Unavailability[]> {
        let url_ = this.baseUrl + "/unavailability";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUnavailabilityAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUnavailabilityAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Unavailability[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Unavailability[]>;
        }));
    }

    protected processUnavailabilityAll(response: HttpResponseBase): Observable<Unavailability[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Unavailability.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Create new unavailability
     * @param unavailability (optional) 
     * @return The created unavailability
     */
    unavailabilityPOST(unavailability: Unavailability2 | null | undefined): Observable<Anonymous> {
        let url_ = this.baseUrl + "/unavailability";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(unavailability);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUnavailabilityPOST(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUnavailabilityPOST(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous>;
        }));
    }

    protected processUnavailabilityPOST(response: HttpResponseBase): Observable<Anonymous> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = Anonymous.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Delete an unavailability
     * @return Unavailability deleted
     */
    unavailabilityDELETE(unavailability_id: number): Observable<void> {
        let url_ = this.baseUrl + "/unavailability/{unavailability_id}";
        if (unavailability_id === undefined || unavailability_id === null)
            throw new Error("The parameter 'unavailability_id' must be defined.");
        url_ = url_.replace("{unavailability_id}", encodeURIComponent("" + unavailability_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUnavailabilityDELETE(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUnavailabilityDELETE(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUnavailabilityDELETE(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Update an unavailability
     * @param unavailability (optional) 
     * @return The updated unavailability
     */
    unavailabilityPUT(unavailability_id: number, unavailability: Unavailability3 | null | undefined): Observable<Anonymous2> {
        let url_ = this.baseUrl + "/unavailability/{unavailability_id}";
        if (unavailability_id === undefined || unavailability_id === null)
            throw new Error("The parameter 'unavailability_id' must be defined.");
        url_ = url_.replace("{unavailability_id}", encodeURIComponent("" + unavailability_id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(unavailability);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUnavailabilityPUT(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUnavailabilityPUT(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous2>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous2>;
        }));
    }

    protected processUnavailabilityPUT(response: HttpResponseBase): Observable<Anonymous2> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous2.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Update a person
     * @param person (optional) 
     * @return The updated person
     */
    updateperson(person_id: number, person: Person3 | null | undefined): Observable<Person> {
        let url_ = this.baseUrl + "/updateperson/{person_id}";
        if (person_id === undefined || person_id === null)
            throw new Error("The parameter 'person_id' must be defined.");
        url_ = url_.replace("{person_id}", encodeURIComponent("" + person_id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(person);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateperson(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateperson(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Person>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Person>;
        }));
    }

    protected processUpdateperson(response: HttpResponseBase): Observable<Person> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Person.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class Assignment implements IAssignment {
    event_id?: number | undefined;
    id?: number | undefined;
    person_id?: number | undefined;
    task_id?: number | undefined;

    constructor(data?: IAssignment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.event_id = _data["event_id"];
            this.id = _data["id"];
            this.person_id = _data["person_id"];
            this.task_id = _data["task_id"];
        }
    }

    static fromJS(data: any): Assignment {
        data = typeof data === 'object' ? data : {};
        let result = new Assignment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["event_id"] = this.event_id;
        data["id"] = this.id;
        data["person_id"] = this.person_id;
        data["task_id"] = this.task_id;
        return data;
    }
}

export interface IAssignment {
    event_id?: number | undefined;
    id?: number | undefined;
    person_id?: number | undefined;
    task_id?: number | undefined;
}

export class Event implements IEvent {
    assignments?: Assignment[] | undefined;
    event_date?: string | undefined;
    event_name?: string | undefined;
    id?: number | undefined;

    constructor(data?: IEvent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["assignments"])) {
                this.assignments = [] as any;
                for (let item of _data["assignments"])
                    this.assignments!.push(Assignment.fromJS(item));
            }
            this.event_date = _data["event_date"];
            this.event_name = _data["event_name"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Event {
        data = typeof data === 'object' ? data : {};
        let result = new Event();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.assignments)) {
            data["assignments"] = [];
            for (let item of this.assignments)
                data["assignments"].push(item.toJSON());
        }
        data["event_date"] = this.event_date;
        data["event_name"] = this.event_name;
        data["id"] = this.id;
        return data;
    }
}

export interface IEvent {
    assignments?: Assignment[] | undefined;
    event_date?: string | undefined;
    event_name?: string | undefined;
    id?: number | undefined;
}

export class Person implements IPerson {
    first_name?: string | undefined;
    id?: number | undefined;
    last_name?: string | undefined;
    tasks?: Tasks[] | undefined;

    constructor(data?: IPerson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.first_name = _data["first_name"];
            this.id = _data["id"];
            this.last_name = _data["last_name"];
            if (Array.isArray(_data["tasks"])) {
                this.tasks = [] as any;
                for (let item of _data["tasks"])
                    this.tasks!.push(Tasks.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Person {
        data = typeof data === 'object' ? data : {};
        let result = new Person();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["first_name"] = this.first_name;
        data["id"] = this.id;
        data["last_name"] = this.last_name;
        if (Array.isArray(this.tasks)) {
            data["tasks"] = [];
            for (let item of this.tasks)
                data["tasks"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPerson {
    first_name?: string | undefined;
    id?: number | undefined;
    last_name?: string | undefined;
    tasks?: Tasks[] | undefined;
}

export class Task implements ITask {
    id?: number | undefined;
    task_name?: string | undefined;

    constructor(data?: ITask) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.task_name = _data["task_name"];
        }
    }

    static fromJS(data: any): Task {
        data = typeof data === 'object' ? data : {};
        let result = new Task();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["task_name"] = this.task_name;
        return data;
    }
}

export interface ITask {
    id?: number | undefined;
    task_name?: string | undefined;
}

export class Unavailability implements IUnavailability {
    end_date?: string | undefined;
    id?: number | undefined;
    person_id?: number | undefined;
    start_date?: string | undefined;

    constructor(data?: IUnavailability) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.end_date = _data["end_date"];
            this.id = _data["id"];
            this.person_id = _data["person_id"];
            this.start_date = _data["start_date"];
        }
    }

    static fromJS(data: any): Unavailability {
        data = typeof data === 'object' ? data : {};
        let result = new Unavailability();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["end_date"] = this.end_date;
        data["id"] = this.id;
        data["person_id"] = this.person_id;
        data["start_date"] = this.start_date;
        return data;
    }
}

export interface IUnavailability {
    end_date?: string | undefined;
    id?: number | undefined;
    person_id?: number | undefined;
    start_date?: string | undefined;
}

export class Assignment2 implements IAssignment2 {
    event_id?: number | undefined;
    person_id?: number | undefined;
    task_id?: number | undefined;

    constructor(data?: IAssignment2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.event_id = _data["event_id"];
            this.person_id = _data["person_id"];
            this.task_id = _data["task_id"];
        }
    }

    static fromJS(data: any): Assignment2 {
        data = typeof data === 'object' ? data : {};
        let result = new Assignment2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["event_id"] = this.event_id;
        data["person_id"] = this.person_id;
        data["task_id"] = this.task_id;
        return data;
    }
}

export interface IAssignment2 {
    event_id?: number | undefined;
    person_id?: number | undefined;
    task_id?: number | undefined;
}

export class Assignment3 implements IAssignment3 {
    event_id?: number | undefined;
    person_id?: number | undefined;
    task_id?: number | undefined;

    constructor(data?: IAssignment3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.event_id = _data["event_id"];
            this.person_id = _data["person_id"];
            this.task_id = _data["task_id"];
        }
    }

    static fromJS(data: any): Assignment3 {
        data = typeof data === 'object' ? data : {};
        let result = new Assignment3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["event_id"] = this.event_id;
        data["person_id"] = this.person_id;
        data["task_id"] = this.task_id;
        return data;
    }
}

export interface IAssignment3 {
    event_id?: number | undefined;
    person_id?: number | undefined;
    task_id?: number | undefined;
}

export class Person2 implements IPerson2 {
    first_name?: string | undefined;
    last_name?: string | undefined;
    tasks?: tasks[] | undefined;

    constructor(data?: IPerson2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.first_name = _data["first_name"];
            this.last_name = _data["last_name"];
            if (Array.isArray(_data["tasks"])) {
                this.tasks = [] as any;
                for (let item of _data["tasks"])
                    this.tasks!.push(tasks.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Person2 {
        data = typeof data === 'object' ? data : {};
        let result = new Person2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["first_name"] = this.first_name;
        data["last_name"] = this.last_name;
        if (Array.isArray(this.tasks)) {
            data["tasks"] = [];
            for (let item of this.tasks)
                data["tasks"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPerson2 {
    first_name?: string | undefined;
    last_name?: string | undefined;
    tasks?: tasks[] | undefined;
}

export class Event2 implements IEvent2 {
    event_date?: string | undefined;
    event_name?: string | undefined;

    constructor(data?: IEvent2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.event_date = _data["event_date"];
            this.event_name = _data["event_name"];
        }
    }

    static fromJS(data: any): Event2 {
        data = typeof data === 'object' ? data : {};
        let result = new Event2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["event_date"] = this.event_date;
        data["event_name"] = this.event_name;
        return data;
    }
}

export interface IEvent2 {
    event_date?: string | undefined;
    event_name?: string | undefined;
}

export class Event3 implements IEvent3 {
    assignments?: Assignment[] | undefined;
    event_date?: string | undefined;
    event_name?: string | undefined;

    constructor(data?: IEvent3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["assignments"])) {
                this.assignments = [] as any;
                for (let item of _data["assignments"])
                    this.assignments!.push(Assignment.fromJS(item));
            }
            this.event_date = _data["event_date"];
            this.event_name = _data["event_name"];
        }
    }

    static fromJS(data: any): Event3 {
        data = typeof data === 'object' ? data : {};
        let result = new Event3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.assignments)) {
            data["assignments"] = [];
            for (let item of this.assignments)
                data["assignments"].push(item.toJSON());
        }
        data["event_date"] = this.event_date;
        data["event_name"] = this.event_name;
        return data;
    }
}

export interface IEvent3 {
    assignments?: Assignment[] | undefined;
    event_date?: string | undefined;
    event_name?: string | undefined;
}

export class Task2 implements ITask2 {
    task_name?: string | undefined;

    constructor(data?: ITask2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.task_name = _data["task_name"];
        }
    }

    static fromJS(data: any): Task2 {
        data = typeof data === 'object' ? data : {};
        let result = new Task2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["task_name"] = this.task_name;
        return data;
    }
}

export interface ITask2 {
    task_name?: string | undefined;
}

export class Task3 implements ITask3 {
    task_name?: string | undefined;

    constructor(data?: ITask3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.task_name = _data["task_name"];
        }
    }

    static fromJS(data: any): Task3 {
        data = typeof data === 'object' ? data : {};
        let result = new Task3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["task_name"] = this.task_name;
        return data;
    }
}

export interface ITask3 {
    task_name?: string | undefined;
}

export class Unavailability2 implements IUnavailability2 {
    end_date?: Date | undefined;
    person_id?: number | undefined;
    start_date?: Date | undefined;

    constructor(data?: IUnavailability2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.end_date = _data["end_date"] ? new Date(_data["end_date"].toString()) : <any>undefined;
            this.person_id = _data["person_id"];
            this.start_date = _data["start_date"] ? new Date(_data["start_date"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Unavailability2 {
        data = typeof data === 'object' ? data : {};
        let result = new Unavailability2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["end_date"] = this.end_date ? formatDate(this.end_date) : <any>undefined;
        data["person_id"] = this.person_id;
        data["start_date"] = this.start_date ? formatDate(this.start_date) : <any>undefined;
        return data;
    }
}

export interface IUnavailability2 {
    end_date?: Date | undefined;
    person_id?: number | undefined;
    start_date?: Date | undefined;
}

export class Unavailability3 implements IUnavailability3 {
    end_date?: string | undefined;
    person_id?: number | undefined;
    start_date?: string | undefined;

    constructor(data?: IUnavailability3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.end_date = _data["end_date"];
            this.person_id = _data["person_id"];
            this.start_date = _data["start_date"];
        }
    }

    static fromJS(data: any): Unavailability3 {
        data = typeof data === 'object' ? data : {};
        let result = new Unavailability3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["end_date"] = this.end_date;
        data["person_id"] = this.person_id;
        data["start_date"] = this.start_date;
        return data;
    }
}

export interface IUnavailability3 {
    end_date?: string | undefined;
    person_id?: number | undefined;
    start_date?: string | undefined;
}

export class Person3 implements IPerson3 {
    first_name?: string | undefined;
    last_name?: string | undefined;
    tasks?: number[] | undefined;

    constructor(data?: IPerson3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.first_name = _data["first_name"];
            this.last_name = _data["last_name"];
            if (Array.isArray(_data["tasks"])) {
                this.tasks = [] as any;
                for (let item of _data["tasks"])
                    this.tasks!.push(item);
            }
        }
    }

    static fromJS(data: any): Person3 {
        data = typeof data === 'object' ? data : {};
        let result = new Person3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["first_name"] = this.first_name;
        data["last_name"] = this.last_name;
        if (Array.isArray(this.tasks)) {
            data["tasks"] = [];
            for (let item of this.tasks)
                data["tasks"].push(item);
        }
        return data;
    }
}

export interface IPerson3 {
    first_name?: string | undefined;
    last_name?: string | undefined;
    tasks?: number[] | undefined;
}

export class Anonymous implements IAnonymous {
    end_date?: string | undefined;
    id?: number | undefined;
    person_id?: number | undefined;
    start_date?: string | undefined;

    constructor(data?: IAnonymous) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.end_date = _data["end_date"];
            this.id = _data["id"];
            this.person_id = _data["person_id"];
            this.start_date = _data["start_date"];
        }
    }

    static fromJS(data: any): Anonymous {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["end_date"] = this.end_date;
        data["id"] = this.id;
        data["person_id"] = this.person_id;
        data["start_date"] = this.start_date;
        return data;
    }
}

export interface IAnonymous {
    end_date?: string | undefined;
    id?: number | undefined;
    person_id?: number | undefined;
    start_date?: string | undefined;
}

export class Anonymous2 implements IAnonymous2 {
    end_date?: Date | undefined;
    id?: number | undefined;
    person_id?: number | undefined;
    start_date?: Date | undefined;

    constructor(data?: IAnonymous2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.end_date = _data["end_date"] ? new Date(_data["end_date"].toString()) : <any>undefined;
            this.id = _data["id"];
            this.person_id = _data["person_id"];
            this.start_date = _data["start_date"] ? new Date(_data["start_date"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Anonymous2 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["end_date"] = this.end_date ? formatDate(this.end_date) : <any>undefined;
        data["id"] = this.id;
        data["person_id"] = this.person_id;
        data["start_date"] = this.start_date ? formatDate(this.start_date) : <any>undefined;
        return data;
    }
}

export interface IAnonymous2 {
    end_date?: Date | undefined;
    id?: number | undefined;
    person_id?: number | undefined;
    start_date?: Date | undefined;
}

export class Tasks implements ITasks {
    id?: number | undefined;
    task_name?: string | undefined;

    constructor(data?: ITasks) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.task_name = _data["task_name"];
        }
    }

    static fromJS(data: any): Tasks {
        data = typeof data === 'object' ? data : {};
        let result = new Tasks();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["task_name"] = this.task_name;
        return data;
    }
}

export interface ITasks {
    id?: number | undefined;
    task_name?: string | undefined;
}

export class tasks implements Itasks {
    id?: number | undefined;

    constructor(data?: Itasks) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): tasks {
        data = typeof data === 'object' ? data : {};
        let result = new tasks();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface Itasks {
    id?: number | undefined;
}

function formatDate(d: Date) {
    return d.getFullYear() + '-' + 
        (d.getMonth() < 9 ? ('0' + (d.getMonth()+1)) : (d.getMonth()+1)) + '-' +
        (d.getDate() < 10 ? ('0' + d.getDate()) : d.getDate());
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}